var utils = require("../utils");
var log = require("npmlog");
const puppeteer = require('puppeteer');

const sleep = async(ms) => {
    return new Promise((res, rej) => {
        setTimeout(() => {
            res();
        }, ms)
    });
}

module.exports = function(defaultFuncs, api, ctx) {
    return async function getSession(email, password, callback) {
        var resolveFunc = function() {};
        var rejectFunc = function() {};
        var returnPromise = new Promise(function(resolve, reject) {
            resolveFunc = resolve;
            rejectFunc = reject;
        });

        if (!callback) {
            callback = function(err, json) {
                if (err) return rejectFunc(err);
                resolveFunc(json);
            };
        }

        this._browser = null;
        this._masterPage = null;
        this.uid = null;
        const browser = this._browser = await puppeteer.launch({
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        const page = (this._masterPage = (await browser.pages())[0])
        await page.goto('https://facebook.com', {
            waitUntil: 'networkidle2'
        });
        await page.waitForSelector('#email');
        await sleep(500);
        await page.type('#email', email);
        await page.type('#pass', password);
        await page.click("button[name=login]");

        await page.waitForNavigation();
        var cookies = await this._masterPage.cookies();

        this.uid = cookies.find(cookie => cookie.name === 'c_user');
        if (this.uid == undefined) {
            log.error('LOGIN_ERROR', `LOGIN`);
            var json = JSON.stringify({ "error": "Wrong email, password..." });
            callback(null, json);
        } else {
            var json = JSON.stringify(format(cookies));
            callback(null, json);
        }
        this._browser.close()

        return returnPromise;
    };
};

function format(cookies) {
    var cok = cookies.map(v => ({
        key: v.name,
        value: v.value,
        domain: "facebook.com",
        path: v.path,
        hostOnly: v.hostOnly,
        creation: new Date().toISOString(),
        lastAccessed: new Date().toISOString()
    }));
    return cok;
}